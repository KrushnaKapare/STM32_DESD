
EXTI_volatile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000448  08000448  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000448  08000448  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000448  08000448  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000448  08000448  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000448  08000448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800044c  0800044c  0000144c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000450  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000147a  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005c7  00000000  00000000  000034a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000001d9  00000000  00000000  00003a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000e0  00000000  00000000  00003c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d8  00000000  00000000  00003d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018fa3  00000000  00000000  00003e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001532  00000000  00000000  0001cda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008be1e  00000000  00000000  0001e2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000aa0f3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000130  00000000  00000000  000aa138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  000aa268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000430 	.word	0x08000430

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000430 	.word	0x08000430

080001c8 <extint_init>:
volatile int ext_flag =0;

void extint_init(void)
{
	// ENABLE CLOCK FOR GPIOA
	RCC->AHB1ENR |= BV(0);
 80001c8:	4810      	ldr	r0, [pc, #64]	@ (800020c <extint_init+0x44>)

	//CONFIGURE GPIOA0 AS INPUT
	GPIOA->MODER &= ~(BV(0) | BV(1));
 80001ca:	4b11      	ldr	r3, [pc, #68]	@ (8000210 <extint_init+0x48>)
	RCC->AHB1ENR |= BV(0);
 80001cc:	6b02      	ldr	r2, [r0, #48]	@ 0x30
	GPIOA->PUPDR &= ~(BV(0) | BV(1));

	//CONFIGURE EXTERNAL INTERUUPT EXTI0 INTO SYSTEM CONFIGURATION

	SYSCFG->EXTICR[0] &= ~(BV(0)|BV(1)|BV(2)|BV(3));
 80001ce:	4911      	ldr	r1, [pc, #68]	@ (8000214 <extint_init+0x4c>)
	RCC->AHB1ENR |= BV(0);
 80001d0:	f042 0201 	orr.w	r2, r2, #1
 80001d4:	6302      	str	r2, [r0, #48]	@ 0x30
	GPIOA->MODER &= ~(BV(0) | BV(1));
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	f022 0203 	bic.w	r2, r2, #3
 80001dc:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR &= ~(BV(0) | BV(1));
 80001de:	68da      	ldr	r2, [r3, #12]
 80001e0:	f022 0203 	bic.w	r2, r2, #3
 80001e4:	60da      	str	r2, [r3, #12]
	SYSCFG->EXTICR[0] &= ~(BV(0)|BV(1)|BV(2)|BV(3));
 80001e6:	688a      	ldr	r2, [r1, #8]

	//CONFIGURE EXTERNAL INTERRUPT EXTI0 INTO EXTERNAL CIRCUIT
	EXTI->IMR |= BV(0);
 80001e8:	f5a3 4344 	sub.w	r3, r3, #50176	@ 0xc400
	SYSCFG->EXTICR[0] &= ~(BV(0)|BV(1)|BV(2)|BV(3));
 80001ec:	f022 020f 	bic.w	r2, r2, #15
 80001f0:	608a      	str	r2, [r1, #8]
	EXTI->IMR |= BV(0);
 80001f2:	681a      	ldr	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f4:	4908      	ldr	r1, [pc, #32]	@ (8000218 <extint_init+0x50>)
 80001f6:	f042 0201 	orr.w	r2, r2, #1
 80001fa:	601a      	str	r2, [r3, #0]
	EXTI->RTSR |= BV(0);
 80001fc:	689a      	ldr	r2, [r3, #8]
 80001fe:	2040      	movs	r0, #64	@ 0x40
 8000200:	f042 0201 	orr.w	r2, r2, #1
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	6008      	str	r0, [r1, #0]

	// CONFIGURE EXTERNAL INTERRUPTS EXTI0 INTO NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);

}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000
 8000214:	40013800 	.word	0x40013800
 8000218:	e000e100 	.word	0xe000e100

0800021c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{

	// clear pending bits of EXTI0 in PR
	EXTI->PR |= BV(0);
 800021c:	4a03      	ldr	r2, [pc, #12]	@ (800022c <EXTI0_IRQHandler+0x10>)
 800021e:	6953      	ldr	r3, [r2, #20]
 8000220:	f043 0301 	orr.w	r3, r3, #1

	//TAKE ACTION
	led_toggle(13);
 8000224:	200d      	movs	r0, #13
	EXTI->PR |= BV(0);
 8000226:	6153      	str	r3, [r2, #20]
	led_toggle(13);
 8000228:	f000 b842 	b.w	80002b0 <led_toggle>
 800022c:	40013c00 	.word	0x40013c00

08000230 <led_init>:
void led_init(uint8_t pin)
{
	//	12 - 24 & 25	//	pin * 2 & pin * 2 + 1
	//	13 - 26 & 27
	//1. Clock Enable
	RCC->AHB1ENR |= BV(GPIOD_CLK_EN);
 8000230:	4913      	ldr	r1, [pc, #76]	@ (8000280 <led_init+0x50>)
	//2. Mode - output
	LED_GPIO->MODER |= BV(pin * 2);
 8000232:	4b14      	ldr	r3, [pc, #80]	@ (8000284 <led_init+0x54>)
	RCC->AHB1ENR |= BV(GPIOD_CLK_EN);
 8000234:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8000236:	f042 0208 	orr.w	r2, r2, #8
{
 800023a:	b410      	push	{r4}
	RCC->AHB1ENR |= BV(GPIOD_CLK_EN);
 800023c:	630a      	str	r2, [r1, #48]	@ 0x30
	LED_GPIO->MODER |= BV(pin * 2);
 800023e:	2201      	movs	r2, #1
 8000240:	681c      	ldr	r4, [r3, #0]
 8000242:	fa00 fc02 	lsl.w	ip, r0, r2
 8000246:	fa02 f10c 	lsl.w	r1, r2, ip
 800024a:	430c      	orrs	r4, r1
 800024c:	601c      	str	r4, [r3, #0]
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 800024e:	681c      	ldr	r4, [r3, #0]
 8000250:	4494      	add	ip, r2
	//3. Output Type - push pull
	LED_GPIO->OTYPER &= ~BV(pin);
 8000252:	fa02 f000 	lsl.w	r0, r2, r0
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 8000256:	fa02 f20c 	lsl.w	r2, r2, ip
	//4. Output Speed - low
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 800025a:	4311      	orrs	r1, r2
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 800025c:	ea24 0202 	bic.w	r2, r4, r2
 8000260:	601a      	str	r2, [r3, #0]
	LED_GPIO->OTYPER &= ~BV(pin);
 8000262:	685a      	ldr	r2, [r3, #4]
	//5. pull up/down - no
	LED_GPIO->PUPDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
}
 8000264:	bc10      	pop	{r4}
	LED_GPIO->OTYPER &= ~BV(pin);
 8000266:	ea22 0200 	bic.w	r2, r2, r0
 800026a:	605a      	str	r2, [r3, #4]
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 800026c:	689a      	ldr	r2, [r3, #8]
 800026e:	ea22 0201 	bic.w	r2, r2, r1
 8000272:	609a      	str	r2, [r3, #8]
	LED_GPIO->PUPDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 8000274:	68da      	ldr	r2, [r3, #12]
 8000276:	ea22 0201 	bic.w	r2, r2, r1
 800027a:	60da      	str	r2, [r3, #12]
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40023800 	.word	0x40023800
 8000284:	40020c00 	.word	0x40020c00

08000288 <led_on>:

void led_on(uint8_t pin)
{
	LED_GPIO->ODR |= BV(pin);
 8000288:	4a03      	ldr	r2, [pc, #12]	@ (8000298 <led_on+0x10>)
 800028a:	2301      	movs	r3, #1
 800028c:	6951      	ldr	r1, [r2, #20]
 800028e:	4083      	lsls	r3, r0
 8000290:	430b      	orrs	r3, r1
 8000292:	6153      	str	r3, [r2, #20]
}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40020c00 	.word	0x40020c00

0800029c <led_off>:

void led_off(uint8_t pin)
{
	LED_GPIO->ODR &= ~BV(pin);
 800029c:	4903      	ldr	r1, [pc, #12]	@ (80002ac <led_off+0x10>)
 800029e:	2201      	movs	r2, #1
 80002a0:	694b      	ldr	r3, [r1, #20]
 80002a2:	4082      	lsls	r2, r0
 80002a4:	ea23 0302 	bic.w	r3, r3, r2
 80002a8:	614b      	str	r3, [r1, #20]
}
 80002aa:	4770      	bx	lr
 80002ac:	40020c00 	.word	0x40020c00

080002b0 <led_toggle>:

void led_toggle(uint8_t pin)
{
	LED_GPIO->ODR ^= BV(pin);
 80002b0:	4a03      	ldr	r2, [pc, #12]	@ (80002c0 <led_toggle+0x10>)
 80002b2:	2301      	movs	r3, #1
 80002b4:	6951      	ldr	r1, [r2, #20]
 80002b6:	4083      	lsls	r3, r0
 80002b8:	404b      	eors	r3, r1
 80002ba:	6153      	str	r3, [r2, #20]
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40020c00 	.word	0x40020c00

080002c4 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

extern volatile int ext_flag;
int main(void)
{
 80002c4:	b580      	push	{r7, lr}

	led_init(13);
 80002c6:	200d      	movs	r0, #13
 80002c8:	f7ff ffb2 	bl	8000230 <led_init>
	extint_init();
 80002cc:	4e1c      	ldr	r6, [pc, #112]	@ (8000340 <main+0x7c>)
 80002ce:	4f1d      	ldr	r7, [pc, #116]	@ (8000344 <main+0x80>)
void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
	uint32_t init_ticks = DWT->CYCCNT;
 80002d0:	4c1d      	ldr	r4, [pc, #116]	@ (8000348 <main+0x84>)
	uint32_t ticks = (SystemCoreClock / 1000);
 80002d2:	4d1e      	ldr	r5, [pc, #120]	@ (800034c <main+0x88>)
 80002d4:	f7ff ff78 	bl	80001c8 <extint_init>
 80002d8:	e001      	b.n	80002de <main+0x1a>
			led_on(13);
			DelayMs(500);
			led_off(13);
			DelayMs(500);
		}
		ext_flag=0;
 80002da:	2300      	movs	r3, #0
 80002dc:	6033      	str	r3, [r6, #0]
		if(ext_flag == 1)
 80002de:	6832      	ldr	r2, [r6, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	2a01      	cmp	r2, #1
 80002e4:	d1f9      	bne.n	80002da <main+0x16>
 80002e6:	fba5 2303 	umull	r2, r3, r5, r3
 80002ea:	099b      	lsrs	r3, r3, #6
 80002ec:	2232      	movs	r2, #50	@ 0x32
	uint32_t init_ticks = DWT->CYCCNT;
 80002ee:	6861      	ldr	r1, [r4, #4]
	ms *= ticks;
 80002f0:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002f4:	6863      	ldr	r3, [r4, #4]
 80002f6:	1a5b      	subs	r3, r3, r1
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d3fb      	bcc.n	80002f4 <main+0x30>
			led_on(13);
 80002fc:	200d      	movs	r0, #13
 80002fe:	f7ff ffc3 	bl	8000288 <led_on>
	uint32_t ticks = (SystemCoreClock / 1000);
 8000302:	683b      	ldr	r3, [r7, #0]
	uint32_t init_ticks = DWT->CYCCNT;
 8000304:	6861      	ldr	r1, [r4, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000306:	fba5 0303 	umull	r0, r3, r5, r3
 800030a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800030e:	099b      	lsrs	r3, r3, #6
	ms *= ticks;
 8000310:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000314:	6863      	ldr	r3, [r4, #4]
 8000316:	1a5b      	subs	r3, r3, r1
 8000318:	4293      	cmp	r3, r2
 800031a:	d3fb      	bcc.n	8000314 <main+0x50>
			led_off(13);
 800031c:	200d      	movs	r0, #13
 800031e:	f7ff ffbd 	bl	800029c <led_off>
	uint32_t ticks = (SystemCoreClock / 1000);
 8000322:	683b      	ldr	r3, [r7, #0]
	uint32_t init_ticks = DWT->CYCCNT;
 8000324:	6861      	ldr	r1, [r4, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000326:	fba5 0303 	umull	r0, r3, r5, r3
 800032a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800032e:	099b      	lsrs	r3, r3, #6
	ms *= ticks;
 8000330:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000334:	6863      	ldr	r3, [r4, #4]
 8000336:	1a5b      	subs	r3, r3, r1
 8000338:	4293      	cmp	r3, r2
 800033a:	d3fb      	bcc.n	8000334 <main+0x70>
 800033c:	e7cd      	b.n	80002da <main+0x16>
 800033e:	bf00      	nop
 8000340:	20000020 	.word	0x20000020
 8000344:	20000000 	.word	0x20000000
 8000348:	e0001000 	.word	0xe0001000
 800034c:	10624dd3 	.word	0x10624dd3

08000350 <SystemInit>:


uint32_t DWT_Init(void)
{
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000350:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <SystemInit+0x3c>)
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000352:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <SystemInit+0x40>)
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000354:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 8000358:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800035c:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000360:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 8000364:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8000368:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	f022 0201 	bic.w	r2, r2, #1
 8000372:	601a      	str	r2, [r3, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000374:	681a      	ldr	r2, [r3, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000376:	2000      	movs	r0, #0
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000378:	f042 0201 	orr.w	r2, r2, #1
 800037c:	601a      	str	r2, [r3, #0]
    DWT->CYCCNT = 0;
 800037e:	6058      	str	r0, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000380:	bf00      	nop
    __ASM volatile ("NOP");
 8000382:	bf00      	nop
    __ASM volatile ("NOP");
 8000384:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000386:	685b      	ldr	r3, [r3, #4]
}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00
 8000390:	e0001000 	.word	0xe0001000

08000394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000394:	480d      	ldr	r0, [pc, #52]	@ (80003cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000396:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000398:	f7ff ffda 	bl	8000350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480c      	ldr	r0, [pc, #48]	@ (80003d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800039e:	490d      	ldr	r1, [pc, #52]	@ (80003d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a0:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <LoopForever+0xe>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	@ (80003dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b4:	4c0a      	ldr	r4, [pc, #40]	@ (80003e0 <LoopForever+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80003c2:	f000 f811 	bl	80003e8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80003c6:	f7ff ff7d 	bl	80002c4 <main>

080003ca <LoopForever>:

LoopForever:
  b LoopForever
 80003ca:	e7fe      	b.n	80003ca <LoopForever>
  ldr   r0, =_estack
 80003cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d8:	08000450 	.word	0x08000450
  ldr r2, =_sbss
 80003dc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003e0:	20000024 	.word	0x20000024

080003e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC_IRQHandler>
	...

080003e8 <__libc_init_array>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000420 <__libc_init_array+0x38>)
 80003ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000424 <__libc_init_array+0x3c>)
 80003ee:	1b64      	subs	r4, r4, r5
 80003f0:	10a4      	asrs	r4, r4, #2
 80003f2:	2600      	movs	r6, #0
 80003f4:	42a6      	cmp	r6, r4
 80003f6:	d109      	bne.n	800040c <__libc_init_array+0x24>
 80003f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000428 <__libc_init_array+0x40>)
 80003fa:	4c0c      	ldr	r4, [pc, #48]	@ (800042c <__libc_init_array+0x44>)
 80003fc:	f000 f818 	bl	8000430 <_init>
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	10a4      	asrs	r4, r4, #2
 8000404:	2600      	movs	r6, #0
 8000406:	42a6      	cmp	r6, r4
 8000408:	d105      	bne.n	8000416 <__libc_init_array+0x2e>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000410:	4798      	blx	r3
 8000412:	3601      	adds	r6, #1
 8000414:	e7ee      	b.n	80003f4 <__libc_init_array+0xc>
 8000416:	f855 3b04 	ldr.w	r3, [r5], #4
 800041a:	4798      	blx	r3
 800041c:	3601      	adds	r6, #1
 800041e:	e7f2      	b.n	8000406 <__libc_init_array+0x1e>
 8000420:	08000448 	.word	0x08000448
 8000424:	08000448 	.word	0x08000448
 8000428:	08000448 	.word	0x08000448
 800042c:	0800044c 	.word	0x0800044c

08000430 <_init>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr

0800043c <_fini>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr
